# DOT(.) Test Cases 
$
23.23.ab;
23.23.23;
.23;
23.243;
92.ab8;
math.pi();
a996.876.123asd.5642b656.
55b.5bc.abc
95{9.76@.556.ad.dh.g;gk
a.b55.c
243..43
$

# CHARACTER TEST CASES
$
'abcs;
'\a;
'\\'a;
'\''a.87;
'a';
'"';
'\\';
'\n';
'\'';
'\z';
'sd'\\'ad';
''}
';r';
'\/';
$

# STRING TEST CASES 
$
"";
"ABDS";
"ABDS
"\"a
"A\"";
"\  Q";"A";
"\n/n";
"\r\z\a\n\\\"|%^&&";
$

# RELATONAL OPERATORS TEST CASES
$
if(word<="");
""!= ;
== "";
9>=9;
$

# RANDOM Test Cases
$
string word = '\'';
if(word<=""){
}
char ch;
int i;
bool flag=false;
$

# RANDOM test case
$
Child_Of A_B_C;; a+b-55{
    while(a<==b+++5&&))
if else(a<>=!+=56
int ch = "abc"+=;53-7",d
return a-b+\\56-abc
ch =b+c
char'a' = '\a\'+;
}
$

# proper program
$
func main(){
    Solution var = create Solution();
    int ans = var.at({1,2,4,5},-2);
    print(ans);
}

class Solution {
    global int arithmeticTriplets(int[] arr, int diff) {
        Map<Integer ,Integer> map = create HashMap<>();
        int n = arr.length ; 
        for(int i = 0 ; i < n ;i=i+1){
            map.put(arr[i],i);
        }
        int ans =0;
        for(int i = 0 ; i < n ;i=i+1){
            int num = arr[i];
            int ind = map.get(num);
            if(map.get(num-diff) != null and map.get(num+diff) != null){
                ans=ans=ans;
            }
        }
        return ans;
        
    }
}

hello
#uni test cases

class A_B_C::a<<<b--6
if_else(a!!!b&&c!==d
while(((a&&c!==56.76
cahr ch="abc+=56\\"abc\"+=65\"+=b
str='c'++'\\'+='ch'\\r'c
a+77.88bc.69bc.b69b.55

98.bs
$
$
class A_B_C::a<<<b--6
if_else(a!!!b&&c!==d
while(((a&&c!==56.76
cahr ch="abc+=56\\"abc\"+=65\"+=b
str='c'++'\\'+='ch'\\r'c
a+77.88bc.69bc.b69b.55
77.88bc.69bc.b69b.55
98.b6
98.32
98.3a
77.88bc
.69bc
.
b69b
.55
as98._bs
$

$
local class parent{
    func local parent(){
        super();
    }
    func local parent(){          
        super(A1,A2);
    }
    func local const id():string{                                         
    }
    func global static const id(): float{
    }
    func local walk():void{
    }
}
func id(int arg1,char arg2,string arg3): int{return 1;}
float var = id(1.1,1,"as");
func id2(int arg1): float{return 1;}
int a = 1;
func call(): void{
    while(c < 5+1){
        New cla = create New(12,"athar");
        }if(4 >= 43+54 * 5 + m)
        {print("dsadas");
        }else
        {int a[] = int[3];
        while(a == b){
            break;
        }
    }
    return 1;
}
$

#int b = 54 + 2.3;
$
mfunc       execute(      ): void {}~ #mfunc
func          ID(        ): void{} #function
func global   ID(  ){         } #constructor
if(a<b         ){         } #if
while(a<b      ){         } #while

$














global const class a{ 
}

global const class b childOf a{ 
}

global class c childOf b { }

mfunc execute(): void {}~


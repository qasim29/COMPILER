# DOT(.) Test Cases 
$
23.23.ab;
23.23.23;
.23;
23.243;
92.ab8;
math.pi();
a996.876.123asd.5642b656.
55b.5bc.abc
95{9.76@.556.ad.dh.g;gk
a.b55.c
243..43
$

# CHARACTER TEST CASES
$
'abcs;
'\a;
'\\'a;
'\''a.87;
'a';
'"';
'\\';
'\n';
'\'';
'\z';
'sd'\\'ad';
''}
';r';
'\/';
$

# STRING TEST CASES 
$
"";
"ABDS";
"ABDS
"\"a
"A\"";
"\  Q";"A";
"\n/n";
"\r\z\a\n\\\"|%^&&";
$

# RELATONAL OPERATORS TEST CASES
$
if(word<="");
""!= ;
== "";
9>=9;
$

# RANDOM Test Cases
$
string word = '\'';
if(word<=""){
}
char ch;
int i;
bool flag=false;
$

# RANDOM test case
$
Child_Of A_B_C;; a+b-55{
    while(a<==b+++5&&))
if else(a<>=!+=56
int ch = "abc"+=;53-7",d
return a-b+\\56-abc
ch =b+c
char'a' = '\a\'+;
}
$

# proper program
$
func main(){
    Solution var = create Solution();
    int ans = var.at({1,2,4,5},-2);
    print(ans);
}

class Solution {
    global int arithmeticTriplets(int[] arr, int diff) {
        Map<Integer ,Integer> map = create HashMap<>();
        int n = arr.length ; 
        for(int i = 0 ; i < n ;i=i+1){
            map.put(arr[i],i);
        }
        int ans =0;
        for(int i = 0 ; i < n ;i=i+1){
            int num = arr[i];
            int ind = map.get(num);
            if(map.get(num-diff) != null and map.get(num+diff) != null){
                ans=ans=ans;
            }
        }
        return ans;
        
    }
}

hello
#uni test cases

class A_B_C::a<<<b--6
if_else(a!!!b&&c!==d
while(((a&&c!==56.76
cahr ch="abc+=56\\"abc\"+=65\"+=b
str='c'++'\\'+='ch'\\r'c
a+77.88bc.69bc.b69b.55

98.bs
$
$
class A_B_C::a<<<b--6
if_else(a!!!b&&c!==d
while(((a&&c!==56.76
cahr ch="abc+=56\\"abc\"+=65\"+=b
str='c'++'\\'+='ch'\\r'c
a+77.88bc.69bc.b69b.55
77.88bc.69bc.b69b.55
98.b6
98.32
98.3a
77.88bc
.69bc
.
b69b
.55
as98._bs
$


#int b = 54 + 2.3;


$

tokens = [ a    +   b   .   fn  (   )   /   c   <=      K   .   fn  (   )   /   c  ] 

temp="int+"

List<string> expROP = { "<=" }

string[] ropOutput      =  [ "a + b.fn() / c" , "K.fn() / c" ]

1::List<string[]> expOperators = { { "(" , "+" , ")"  , "/"}  , {"/"} }

List<string[]> ids = [ {"(a" , "b.fn())" , "c"}  , { "K.fn()" , "c" }  ]

2::List<string[]> idsOutput = [ {"int" , "int" , "int"}  , { "float" , "float" }  ]

List<string> SUB_EXP_Type ={ "int" }


#   COMIBINE 1 & 2

output == " int + int / int ";

#   convert to postfix

output == " int int int / + ";  ---> int


logic for get getType

string temp = a.b.cah;  --> [a  , b , cah]  
                        --> [self, a  , b , cah]
                        --> [super, a  , b , cah]
arr = temp.split('.');




if (exp.getR().equals("")) {
                String t = se.lookupFT(exp.getN(), se.stack);
                if (t != null) {
                    exp.setT(t);
                } else {
                    MDT m = se.lookupMT(exp.getN());
                    if (m != null) {
                        if (m.getTM() == null || !m.getTM().equals("static")) {
                            System.out.println("Error at : " + ts.get(i).getLineNo() + " class should be static");
                            exit(0);
                        }
                        exp.setR(m.getN());
                    } else {
                        System.out.println("Error at " + ts.get(i).getLineNo() + ": Variable not declare ");
                        exit(0);
                    }
                }

            } else if (exp.getR().equals("self")) {
                CDT c = se.lookupDT(exp.getN(), se.CCT);
                if (c != null) {

                    exp.setT(c.getT());

                } else {
                    System.out.println("Error at " + ts.get(i).getLineNo() + ": Variable not declare ");
                    exit(0);
                }
            } else if (exp.getR().equals("super")) {
                MDT m = se.lookupMT(se.CCT);
                if (m.getExt() == null || m.getExt().equals("")) {
                    System.out.println("Current Class does not have parent class");
                    exit(0);
                } else {
                    CDT c = se.lookupDT(exp.getN(), m.getExt());
                    if (c != null) {

                        exp.setT(c.getT());

                    } else {
                        System.out.println("Error at " + ts.get(i).getLineNo() + ": Variable not declare ");
                        exit(0);
                    }
                }
            } else if (exp.getR().equals("int") || exp.getR().equals("float") || exp.getR().equals("char")
                    || exp.getR().equals("String") || exp.getR().equals("bool")) {
                System.out.println("Error at " + ts.get(i).getLineNo() + "Primitive data Type cant be instantiated");
                exit(0);
            } else if (exp.getR().equals("devoid")) {
                System.out.println("Error at " + ts.get(i).getLineNo() + "Return type is devoid");
                exit(0);
            } else {
                CDT c = se.lookupDT(exp.getN(), exp.getR());
                if (c == null) {
                    while (true) {
                        MDT m = se.lookupMT(exp.getR());
                        if (m == null) {
                            System.out.println("Error at " + ts.get(i).getLineNo() + " :Undeclared");
                            exit(0);
                        } else if (m.getExt() == null || m.getExt().equals("")) {
                            System.out.println("Error at " + ts.get(i).getLineNo() + " :Undeclared");
                            exit(0);
                        } else {
                            c = se.lookupDT(exp.getN(), m.getExt());
                            if (c == null) {
                                exp.setR(m.getExt());
                            } else if (c.getAM().equals("restricted") && !c.getN().equals(se.CCT)) {
                                System.out.println("Error at : " + ts.get(i).getLineNo() + "private attribute or function cant be accessed outside the class");
                                exit(0);
                            } else {
                                exp.setT(c.getT());
                                break;
                            }

                        }
                    }
                } else if (c.getAM().equals("restricted") && !c.getN().equals(se.CCT)) {
                    System.out.println("Error at : " + ts.get(i).getLineNo() + "private attribute or function cant be accessed outside the class");
                    exit(0);
                } else {
                    exp.setT(c.getT());
                }

            }


$




$
local class parent{
    func local parent(){
        super();
    }
    func local parent(){          
        super(A1,A2);
    }
    func local const id():string{                                         
    }
    func global static const id(): float{
    }
    func local walk():void{
    }
}
func id(int arg1,char arg2,string arg3): int{return 1;}
float var = id(1.1,1,"as");
func id2(int arg1): float{return 1;}
int a = 1;
func call(): void{
    while(c < 5+1){
        New cla = create New(12,"athar");
        }if(4 >= 43+54 * 5 + m)
        {print("dsadas");
        }else
        {int a[] = int[3];
        while(a == b){
            break;
        }
    }
    return 1;
}
$

$
if(a<b         ){         } #if
while(a<b      ){         } #while

#FUNCTIONS
#global TCase
execute()  : void {         }~          #mfunc
func ID (DT ID)  : void {         }           #function

#class TCases 
func global ID (ID ID)  : void {         }           #class-method

funcglobal ID (DT ID[][] , ID ID[])         {         }           #constructor


CALL(int arr[]):arr[]
{

}

$








$

#----------------------------- TEST CASES---------------------

global class abu {
    func global abu(){
        super();
    }
}
global class parent childOf abu {
    func global parent(){
        super();
    }
}
global class child childOf parent{
    func global child(){
        super();
    }
}
global class person{

    global abu dad = create abu();
    
    func global person(){
        super();
        abu dad = create abu();

    }
}

#parent p = create child(int a);    #No constructor found for: child on lineNo: 450

#parent p = create person();        #Type Mismatch on lineNo: 452

#abu p = create dragon();           #No refference found for: dragon on lineNo: 454
$




$
# VARIABLE_DECLARATION

#GLOBAL_DECLARATION
int arr = int [2];
int a = SC;
string const s= SC;
int a=b=c;
int a = arr[0];

int a[] = {2,3,4}
int a[][] = {{2,3},{4}}
int a[][] = int [2][3]
int a[] = {2,3,4} , b[] = int [2];
int a[] , b[];
int x=4 , z=5;
int y = d = g = 0 ;


#CLASS_DECLARATION
global int arr []= int [2];
global int a = SC;
global const  string s= SC;
global const  string s= SC;
global static const string s = SC;


Array declaration syntax

int arr[] = {exp,exp,exp,exp};           -> int[]

int a[][] = {{exp,exp},{},{}};           -> int[][]

int arr[] = int [exp];                   -> int[]

int arr[][] = int [exp] [exp];           -> int[][]

$

int a[][] = {{5,5},{5}};

execute ( ): void {
}~



